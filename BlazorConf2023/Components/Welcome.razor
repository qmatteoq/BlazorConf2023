@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Hosting
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject MicrosoftTeams MicrosoftTeams
@inject IWebHostEnvironment HostEnvironment
@inject IConfiguration Configuration
@inject NavigationManager MyNavigationManager

@if (isLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else
{
    <div class="welcome page">
        <div class="narrow page-padding">
            <img src="hello.png" />
            <h1 class="center">Congratulations@(!String.IsNullOrEmpty(userName) ? ", " + userName : "")!</h1>
            <p class="center">
                @if (isInTeams)
                {
                    <strong>The application is running in Microsoft Teams</strong>
                    <div>@statusMessage</div>
                }
                else
                {
                    <strong>The application is not running in Microsoft Teams</strong>
                }
            </p>
            <FluentTabs style="width: 80%; justify-content: space-between; margin: 4rem auto;">
                <FluentTab><strong>Files</strong></FluentTab>
                <FluentTab><strong>Tasks</strong></FluentTab>
                <FluentTabPanel>
                    <DocumentSummary />
                </FluentTabPanel>
                <FluentTabPanel>
                    <Tasks />
                </FluentTabPanel>
            </FluentTabs>
        </div>
    </div>
}

@code {
    string userName;
    string errorMessage;
    bool isInTeams;
    bool isLoading = true;
    string teamName;
    string channelName;
    string statusMessage;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            isInTeams = await MicrosoftTeams.IsInTeams();

            if (isInTeams)
            {
                var user = await teamsUserCredential.GetUserInfoAsync();
                userName = user.DisplayName;
                var teamsContext = await MicrosoftTeams.GetTeamsContextAsync();
                if (teamsContext != null && teamsContext.Team != null)
                {
                    statusMessage = $"The app is running in the context of the {teamsContext.Channel.DisplayName} channel of the {teamsContext.Team.DisplayName} team";
                }
                else if (teamsContext != null && teamsContext.Meeting != null)
                {
                    statusMessage = $"The app is running in the context of the meeting with id {teamsContext.Meeting.Id}";
                }
                else
                {
                    statusMessage = $"The app is running in the context of the personal scope";
                }
            }
            else
            {
                errorMessage = "Not running in Microsoft Teams.";
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetEnvironmentName()
    {
        return HostEnvironment.IsDevelopment() ? "local environment" : "Azure environment";
    }
}